import{a1 as a,aA as p,b6 as o,r as g,ac as s,ad as m,af as l}from"./index-607cb647.js";import{f as c}from"./LayerView2D-7de436d6.js";import{i as n}from"./GraphicContainer-9752dcb0.js";import{a as d}from"./GraphicsView2D-f419e88d.js";import{u}from"./LayerView-4dad4e85.js";import"./Container-ce8af6b1.js";import"./definitions-19bfb61c.js";import"./enums-b1d611e3.js";import"./BaseGraphicContainer-19082cb4.js";import"./FeatureContainer-e197ed56.js";import"./AttributeStoreView-82478825.js";import"./visualVariablesUtils-5dc11a7e.js";import"./color-201e7fc6.js";import"./enums-4b2a86a0.js";import"./number-b10bd8f5.js";import"./visualVariablesUtils-4e1f86eb.js";import"./TileContainer-2d453d1a.js";import"./WGLContainer-250ba04d.js";import"./WGLBrushVTLSymbol-0e3d41a7.js";import"./StyleDefinition-7d58136b.js";import"./GeometryUtils-dd03fc25.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-c9a4930f.js";import"./MaterialKey-78993dcc.js";import"./alignmentUtils-ae955d28.js";import"./utils-0eaf42ad.js";import"./heatmapTextureUtils-9f08bd2e.js";import"./cimAnalyzer-5aaaffea.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./utils-bab516ed.js";import"./Rect-ea14f53a.js";import"./normalizeUtilsSync-ea656d2f.js";import"./Matcher-ecc8aa50.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-4ab158f8.js";import"./ExpandedCIM-d24cecb3.js";import"./schemaUtils-364d2dd9.js";import"./util-2232a3b9.js";import"./ComputedAttributeStorage-dfaa822b.js";import"./arcadeTimeUtils-5c2554fb.js";import"./centroid-43324cfb.js";import"./GraphicsView-7162458c.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(u){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new d({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new n(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=a(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof p?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):o.isCollection(i)&&i.length>0&&(t=i.map(h=>h&&h.uid).toArray());const r=t==null?void 0:t.filter(g);return r!=null&&r.length?(this._addHighlight(r),{remove:()=>this._removeHighlight(r)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t);this._highlightIds.set(t,r+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t)-1;r===0?this._highlightIds.delete(t):this._highlightIds.set(t,r)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([m()],e.prototype,"graphicsView",void 0),e=s([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const ai=e;export{ai as default};
