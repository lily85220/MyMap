import{q7 as n,a4 as p,aA as m,v as l,ac as i,ad as e,nL as d,af as h}from"./index-607cb647.js";import{v as u}from"./I3SMeshView3D-1faaebe1.js";import{n as c}from"./LayerView3D-2d3ccbd2.js";import{u as g}from"./LayerView-4dad4e85.js";import"./I3SOverrides-4e62772d.js";import"./I3SNode-fb0c1aa4.js";import"./I3SUtil-4b92c782.js";import"./I3SBinaryReader-5477221d.js";import"./RenderTexture-daa4c788.js";import"./FeatureLayerView3D-632fc1b1.js";import"./FeatureLayerViewBase3D-fd47a3ec.js";import"./FeatureLikeLayerView3D-05bb2950.js";import"./dehydratedFeatureComparison-1e999854.js";import"./queryForSymbologySnapping-58288d17.js";import"./hash-0ddfbf4b.js";import"./Graphics3DObjectStates-235e322c.js";import"./optimizedFeatureQueryEngineAdapter-1b2232cc.js";import"./centroid-43324cfb.js";import"./PooledRBush-634494ef.js";import"./QueryEngine-3ff9bb28.js";import"./timeSupport-53e00fec.js";import"./FeatureStore-3d329952.js";import"./BoundsStore-145f7e93.js";import"./heatmapTextureUtils-9f08bd2e.js";import"./projectExtentUtils-e9ba58b3.js";import"./EventedSet-d58ad903.js";import"./FeatureLayerView-46645edf.js";import"./popupUtils-d115b8fc.js";import"./RefreshableLayerView-43a7cacf.js";import"./SceneModification-5b621c09.js";import"./persistable-4b43c5ea.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./resourceExtension-5b673d11.js";import"./SceneLayerWorker-c4b39876.js";const y=.2;let r=class extends u(c(g)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?y:1}get layerPopupEnabled(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),l(this.layer.modifications))return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(d)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([h("esri.views.3d.layers.SceneLayerView3D")],r);const X=r;export{X as default};
